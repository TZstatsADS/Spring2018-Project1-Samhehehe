# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
inaug=f.speechlinks(main.page)
print(R.version)
install.packages("plotstacked")
install.packages("speechFuncs")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
setwd("C:/StudyLife/Columbia/STAT 5243/wk2-TextMining/wk2-TextMining/doc")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
#head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
# Get link URLs
farewell <- f.speechlinks(main.page)
#head(farewell)
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
speech1=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
speech2=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA2.txt",
n=-1, skipNul=TRUE),
collapse=" ")
speech3=paste(readLines("../data/fulltext/PressDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
Trump.speeches=data.frame(
President=rep("Donald J. Trump", 3),
File=rep("DonaldJTrump", 3),
Term=rep(0, 3),
Party=rep("Republican", 3),
Date=c("August 31, 2016", "September 7, 2016", "January 11, 2017"),
Words=c(word_count(speech1), word_count(speech2), word_count(speech3)),
Win=rep("yes", 3),
type=rep("speeches", 3),
links=rep(NA, 3),
urls=rep(NA, 3),
fulltext=c(speech1, speech2, speech3)
)
speech.list=rbind(speech.list, Trump.speeches)
sentence.list=NULL
for(i in 1:nrow(speech.list)){
sentences=sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0){
emotions=get_nrc_sentiment(sentences)
word.count=word_count(sentences)
# colnames(emotions)=paste0("emo.", colnames(emotions))
# in case the word counts are zeros?
emotions=diag(1/(word.count+0.01))%*%as.matrix(emotions)
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
emotions,
sent.id=1:length(sentences)
)
)
}
}
setwd("C:/StudyLife/Columbia/STAT 5243/wk2-TextMining/wk2-TextMining/doc")
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tydytext)
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tydytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tidytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tidytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
ff.all<-tm_map(ff.all, stripWhitespace)
ff.all<-tm_map(ff.all, content_transformer(tolower))
ff.all<-tm_map(ff.all, removeWords, stopwords("english"))
ff.all<-tm_map(ff.all, removeWords, character(0))
ff.all<-tm_map(ff.all, removePunctuation)
tdm.all<-TermDocumentMatrix(ff.all)
tdm.tidy=tidy(tdm.all)
tdm.overall=summarise(group_by(tdm.tidy, term), sum(count))
dtm <- DocumentTermMatrix(ff.all,
control = list(weighting = function(x)
weightTfIdf(x,
normalize =FALSE),
stopwords = TRUE))
ff.dtm=tidy(dtm)
library(shiny)
shinyApp(
ui = fluidPage(
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('speech1', 'Speech 1',
speeches,
selected=speeches[5])),
column(4, selectInput('speech2', 'Speech 2', speeches,
selected=speeches[9])),
column(4, sliderInput('nwords', 'Number of words', 3,
min = 20, max = 200, value=100, step = 20))
),
fluidRow(
plotOutput('wordclouds', height = "400px")
)
),
server = function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
list(dtm.term1=ff.dtm$term[ff.dtm$document==as.character(input$speech1)],
dtm.count1=ff.dtm$count[ff.dtm$document==as.character(input$speech1)],
dtm.term2=ff.dtm$term[ff.dtm$document==as.character(input$speech2)],
dtm.count2=ff.dtm$count[ff.dtm$document==as.character(input$speech2)])
})
output$wordclouds <- renderPlot(height = 400, {
par(mfrow=c(1,2), mar = c(0, 0, 3, 0))
wordcloud(selectedData()$dtm.term1,
selectedData()$dtm.count1,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech1)
wordcloud(selectedData()$dtm.term2,
selectedData()$dtm.count2,
scale=c(4,0.5),
max.words=input$nwords,
min.freq=1,
random.order=FALSE,
rot.per=0,
use.r.layout=FALSE,
random.color=FALSE,
colors=brewer.pal(10,"Blues"),
main=input$speech2)
})
},
options = list(height = 600)
)
?Corpus
Corpus
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
install.packages("DT")
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
library(Rcharts)
install.packages("Rcharts")
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
library(Rcharts)
install.packages("Rcharts")
install.packages("charts")
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
library(charts)
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
library(Rcharts)
install.packages("Rcharts")
library(htmlwidgets)
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
#library(Rcharts)
library(htmlwidgets)
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates")
setwd("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/doc")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt")
dates <- readLines("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt")
dates <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationInfo.csv")
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationInfo.csv")
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.xlsx")
basicinfo <- read.xlsx("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.xlsx")
install.packages("xlsx")
library(xlsx)
library("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
setwd("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/doc")
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.xlsx")
View(basicinfo)
basicinfo <- read.xlsx("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.xlsx")
basicinfo <- read.xlsx("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.xlsx")
?read.xlsx
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
View(basicinfo)
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
View(basicinfo)
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt")
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv", fill = TRUE)
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt", fill = TRUE)
View(basicinfo)
View(dates)
?readLines
Lincoln1 <- readLines("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches")
Lincoln1 <- readLines("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches/inaugAbrahamLincoln-1.txt")
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tidytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
ff.all[1]
ff.all
folder.path="C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
#library(Rcharts)
library(htmlwidgets)
# Read in the basic information and speeches
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt", fill = TRUE)
folder.path="C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
#prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
speeches <- Corpus(DirSource(folder.path))
# Read in the basic information and speeches
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt", fill = TRUE)
folder.path="C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
speeches <- Corpus(DirSource(folder.path))
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
#library(Rcharts)
library(htmlwidgets)
# Read in the basic information and speeches
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt", fill = TRUE)
folder.path="C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
speeches <- Corpus(DirSource(folder.path))
# Load necessary packages
library(dplyr)
library(readr)
library(DT)
library(tibble)
#library(Rcharts)
library(htmlwidgets)
# Read in the basic information and speeches
basicinfo <- read.csv("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InaugurationInfo.csv")
dates <- read.table("C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguationDates.txt", fill = TRUE)
folder.path="C:/StudyLife/Columbia/STAT 5243/Project 1/Spring2018-Project1-Samhehehe/data/InauguralSpeeches"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
allspeeches <- Corpus(DirSource(folder.path))
allspeeches <- tm_map(allspeeches, stripWhitespace)
allspeeches <- tm_map(allspeeches, content_transformer(tolower))
allspeeches <- tm_map(allspeeches, removeWords, stopwords("english"))
allspeeches <- tm_map(allspeeches, removeWords, stopwords("english"))
allspeeches <- tm_map(allspeeches, removeWords, character(0))
allspeeches <- tm_map(allspeeches, removeWords, stopwords("english"))
allspeeches <- tm_map(allspeeches, removeWords, character(0))
allspeeches <- tm_map(allspeeches, removePunctuation)
